// Generated by dts-bundle-generator v9.5.1

export declare class $reactive<T> {
  private value
  private listeners
  constructor(value: T)
  subscribe(listener: (data: T) => any): void
  unsubscribe(id: (data: T) => void): void
  get(key?: string): any | T | undefined
  set(key: T | string, value?: any | null): void
  getAll(): T
  static merge(
    reactive1: $reactive<any>,
    reactive2: $reactive<any>,
  ): $reactive<any>
  destroy(): void
  isNull(): boolean
  init(): void
}
export declare class Component {
  static counter: number
  id: string
  tagName: string
  className: string
  children: Component[]
  attributes: Record<string, string | number | boolean>
  state: $reactive<Record<any, any>>
  events: Record<string, (event: Event) => void>
  text: string
  parent: Component | null
  onRenderFunctions: (() => any)[]
  onUpdateFunctions: (() => any)[]
  onDestroyFunctions: (() => any | boolean)[]
  constructor(props?: Record<string, any>)
  onRender(func: () => any): this
  onUpdate(func: () => any): this
  onDestroy(func: () => any | boolean): this
  withId(id: string): this
  withClassName(className: string): this
  withChild(child: Component): this
  withChildren(...children: Component[]): this
  withClassNames(...classNames: string[]): this
  withAttribute(key: string, value: string): this
  withAttributes(attributes: Record<string, string>): this
  on(
    event: keyof GlobalEventHandlersEventMap,
    callback: (event: Event) => void,
  ): this
  onClick(callback: (event: Event) => void): this
  onEnter(callback: (event: Event) => void): this
  onLeave(callback: (event: Event) => void): this
  onFocus(callback: (event: Event) => void): this
  as(tagName: string): this
  onBlur(callback: (event: Event) => void): this
  onDoubleClick(callback: (event: Event) => void): this
  onMouseDown(callback: (event: Event) => void): this
  onMouseUp(callback: (event: Event) => void): this
  onMouseMove(callback: (event: Event) => void): this
  withText(text: string): this
}
export declare class Button extends Component {
  constructor(props?: Record<string, any>)
}
export declare class Header extends Component {
  constructor(level: number, props?: Record<string, any>)
}
export declare class Paragraph extends Component {
  constructor(props?: Record<string, any>)
}
declare class Text$1 extends Component {
  constructor(text: string, props?: Record<string, any>)
}
export declare class Div extends Component {
  constructor(props?: Record<string, any>)
}
export declare class Link extends Component {
  constructor(href?: string, props?: Record<string, any>)
  withLink(href: string): Link
  withBlankTarget(): Link
  withRel(rel: string): Link
}
export declare class RouterLink extends Link {
  constructor(href?: string, props?: Record<string, any>)
  withLink(href: string): RouterLink
}
declare class Image$1 extends Component {
  constructor(src: string, props?: Record<string, any>)
  withAlt(alt: string): Image$1
  withWidth(width: number): Image$1
  withHeight(height: number): Image$1
}
export declare class Input extends Component {
  constructor(type?: string, props?: Record<string, any>)
  withValue(value: string): Input
  withPlaceholder(placeholder: string): Input
  withRequired(): Input
  withDisabled(): Input
  withReadOnly(): Input
  withAutofocus(): Input
  withMin(min: number): Input
  withMax(max: number): Input
  onInput(callback: (event: Event) => void): Input
}
export declare class Head {
  title: string
  links: {
    type: string
    href: string
    data: any
  }[]
  meta_tags: {
    name: string
    content: string
  }[]
  scripts: {
    src: string
    async: boolean
  }[]
  styles: string[]
  constructor(title: string)
  addLink(type: string, href: string, data?: any): void
  addMeta(name: string, content: string): void
  addScript(src: string, async?: boolean): void
  addStyle(style: string): void
  withLink(type: string, href: string): this
  withMeta(name: string, content: string): this
  withScript(src: string, async?: boolean): this
  withStyle(style: string): this
  render(): void
  private render_link_data
}
export declare function render(app: Component, head?: Head): void
export declare function render_template(
  string: string,
  params: {
    [key: string]: any
  },
): string
export declare function apply_diffs(
  element1: HTMLElement,
  new_element: HTMLElement,
): void
export declare const PASTEL_VERSION = '0.0.1'
export declare class Router {
  private routes
  private current_route
  private current_hash
  head: Head
  private did_halt_destroy
  private parse_hash
  constructor(routes: Record<string, Component>, head: Head)
  listen(): void
  navigate(route: string): void
  private handle_hashchange
}

export { Image$1 as Image, Text$1 as Text }

export {}
